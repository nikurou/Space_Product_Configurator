{"version":3,"sources":["components/Circle_ColorPicker.js","components/Accordion_Dropdown.js","assets/textures/earth_texture.jpg","components/3D_Components/Earth.js","assets/textures/moon_texture.jpg","assets/normal_maps/moon_normal.jpg","components/3D_Components/Moon.js","App.js","index.js"],"names":["Circle_ColorPicker","props","width","color","onChange","handleColorChange","useStyles","makeStyles","theme","root","marginBottom","marginRight","heading","fontSize","typography","pxToRem","icon_description","display","flexDirection","secondaryHeading","palette","text","secondary","icon","verticalAlign","height","details","justifyContent","column","flexBasis","Accordion_Dropdown","classes","useState","currentColor","setCurrentColor","useEffect","applyCurrColorToObject","meshArray","find","obj","name","mesh_name","set","hex","className","Accordion","defaultExpanded","AccordionSummary","expandIcon","style","backgroundColor","overflow","borderTopLeftRadius","borderTopRightRadius","Typography","AccordionDetails","Earth","mesh","useRef","useFrame","current","rotation","x","y","z","earthTexture","useLoader","TextureLoader","earth_texture","ref","scale","position","attach","args","map","Moon","moonTexture","moon_texture","moonNormal","moon_normal","normalMap","App","setPos","setMeshArray","temp","createStars","Loader","progress","useProgress","Html","center","numStars","i","ind","Math","floor","random","push","Switch","group","useGLTF","nodes","materials","meshes_array","Object","values","filter","type","handleSetMesh","geometry","mesh_0","material","Top_Radiator_Mesh","mesh_1","Volume_Rocker","mesh_2","Screen_Bezel","mesh_3","Bumper_and_Buttons","mesh_4","Right_Joycon","mesh_5","Left_Joycon","require","isEqual","class","colorManagement","camera","intensity","Stars","fallback","Environment","preset","OrbitControls","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e30f4da.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CirclePicker } from \"react-color\";\r\n\r\nconst Circle_ColorPicker = (props) => {\r\n  const color_selection = [\r\n    \"#D9E3F0\",\r\n    \"#F47373\",\r\n    \"#697689\",\r\n    \"#37D67A\",\r\n    \"#2CCCE4\",\r\n    \"#555555\",\r\n    \"#dce775\",\r\n    \"#ff8a65\",\r\n    \"#ba68c8\",\r\n  ];\r\n\r\n  return (\r\n    <CirclePicker\r\n      width=\"100%\"\r\n      color={color_selection}\r\n      onChange={(color) => {\r\n        props.handleColorChange(color);\r\n      }}\r\n      //onChangeComplete={props.handleApplyColor}\r\n    ></CirclePicker>\r\n  );\r\n};\r\n\r\nexport default Circle_ColorPicker;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport SportsEsportsIcon from \"@material-ui/icons/SportsEsports\";\r\nimport Circle_ColorPicker from \"./Circle_ColorPicker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginBottom: 20,\r\n    marginRight: 20,\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  icon_description: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  icon: {\r\n    verticalAlign: \"bottom\",\r\n    height: 20,\r\n    width: 20,\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  column: {\r\n    flexBasis: \"33.33%\",\r\n  },\r\n}));\r\n\r\nconst Accordion_Dropdown = (props) => {\r\n  const classes = useStyles();\r\n  const [currentColor, setCurrentColor] = useState(\"#fff\");\r\n\r\n  // A helper function to set color hook\r\n  const handleColorChange = (color) => {\r\n    setCurrentColor(color);\r\n  };\r\n\r\n  // Change the color of the 3D object anytime a color is changed.\r\n  useEffect(() => {\r\n    applyCurrColorToObject();\r\n  }, [currentColor]);\r\n\r\n  //  Function to actually apply current color to the 3D Object\r\n  //  at specified Mesh (props.mesh_name)\r\n  const applyCurrColorToObject = () => {\r\n    //Allows you to wait for the data of props.meshArray to be loaded in\r\n    // and not crash if it's not in yet.\r\n    if (props.meshArray != null) {\r\n      const found = props.meshArray.find((obj) => obj.name === props.mesh_name);\r\n      found.color.set(`${currentColor.hex}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Accordion defaultExpanded>\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          style={{\r\n            backgroundColor: currentColor.hex,\r\n            overflow: \"hidden\",\r\n            borderTopLeftRadius: \"4px\",\r\n            borderTopRightRadius: \"4px\",\r\n          }}\r\n        >\r\n          <div className={`${classes.column} ${classes.icon_description}`}>\r\n            <SportsEsportsIcon />\r\n            <Typography className={classes.heading}>\r\n              {props.mesh_name}\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.column}>\r\n            <Typography className={classes.secondaryHeading}>\r\n              {currentColor.hex}\r\n            </Typography>\r\n          </div>\r\n        </AccordionSummary>\r\n\r\n        <AccordionDetails className={classes.details}>\r\n          <Circle_ColorPicker\r\n            currentColor={currentColor}\r\n            handleColorChange={handleColorChange}\r\n            //handleApplyColor={applyCurrColorToObject}\r\n          />\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Accordion_Dropdown;\r\n","export default __webpack_public_path__ + \"static/media/earth_texture.72b68566.jpg\";","import React, { useRef } from \"react\";\r\nimport { useFrame, useLoader } from \"@react-three/fiber\";\r\nimport { TextureLoader } from \"three\";\r\nimport earth_texture from \"../../assets/textures/earth_texture.jpg\";\r\n\r\nconst Earth = (props) => {\r\n  const mesh = useRef();\r\n  useFrame(() => {\r\n    mesh.current.rotation.x += 0;\r\n    mesh.current.rotation.y += 0.0005;\r\n    mesh.current.rotation.z += 0.0001;\r\n  });\r\n\r\n  //Earth TextureMap\r\n  const earthTexture = useLoader(TextureLoader, earth_texture);\r\n  //Earth NormalMap\r\n  // Might not need\r\n\r\n  return (\r\n    <mesh ref={mesh} scale={0.45} position={props.position}>\r\n      <sphereBufferGeometry attach=\"geometry\" args={[30, 50, 50]} />\r\n      <meshStandardMaterial map={earthTexture} attach=\"material\" />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default Earth;\r\n","export default __webpack_public_path__ + \"static/media/moon_texture.a2edaf85.jpg\";","export default __webpack_public_path__ + \"static/media/moon_normal.573c0a93.jpg\";","import React, { useRef } from \"react\";\r\nimport { useFrame, useLoader } from \"@react-three/fiber\";\r\nimport { TextureLoader } from \"three\";\r\nimport moon_texture from \"../../assets/textures/moon_texture.jpg\";\r\nimport moon_normal from \"../../assets/normal_maps/moon_normal.jpg\";\r\n\r\nconst Moon = (props) => {\r\n  const mesh = useRef();\r\n  useFrame(() => {\r\n    mesh.current.rotation.x += 0;\r\n    mesh.current.rotation.y += 0.002;\r\n    mesh.current.rotation.z += 0.0001;\r\n  });\r\n\r\n  //Moon TextureMap\r\n  const moonTexture = useLoader(TextureLoader, moon_texture);\r\n  //Moon NormalMap\r\n  const moonNormal = useLoader(TextureLoader, moon_normal);\r\n\r\n  return (\r\n    <mesh ref={mesh} scale={0.45} position={props.position}>\r\n      <sphereBufferGeometry attach=\"geometry\" args={[15, 20, 20]} />\r\n      <meshStandardMaterial\r\n        map={moonTexture}\r\n        normalMap={moonNormal}\r\n        attach=\"material\"\r\n      />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default Moon;\r\n","import React, { useRef, useState, Suspense, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { Html, useProgress } from \"@react-three/drei\";\nimport { Environment, OrbitControls, Stars } from \"@react-three/drei\";\nimport Accordion_Dropdown from \"./components/Accordion_Dropdown\";\nimport { useGLTF } from \"@react-three/drei\";\n\n//3D Components\n\nimport Earth from \"./components/3D_Components/Earth\";\nimport Moon from \"./components/3D_Components/Moon\";\n\nconst App = () => {\n  // Star Position Array Hook\n  const [posArray, setPos] = useState([]);\n  // Array hook that holds pointers to every mesh object of a given 3d model.\n  const [meshArray, setMeshArray] = useState([]);\n\n  // Trigger on Initial Render\n  // Generate position array for Stars between -100 and 100\n  useEffect(() => {\n    const temp = createStars(700);\n    setPos(temp);\n  }, []);\n\n  // Purpose:  While in Suspense, use this as fallback Loader\n  const Loader = () => {\n    const { progress } = useProgress();\n    return <Html center>{progress} % loaded</Html>;\n  };\n\n  // Params: int numStars\n  // Purpose: Given an integer numStars, generates an array \"temp\" of size numStars.\n  //          Populates with array \"ind\";\n  //          where \"ind\" is made of [randomNumber, randomNumber, randomNumber]\n  const createStars = (numStars) => {\n    const temp = [];\n    for (let i = 0; i < numStars; i++) {\n      let ind = [\n        Math.floor(Math.random() * (100 - -100 + 1) + -100),\n        Math.floor(Math.random() * (100 - -100 + 1) + -100),\n        Math.floor(Math.random() * (100 - -100 + 1) + -100),\n      ];\n      temp.push(ind);\n    }\n    return temp;\n  };\n\n  // Purpose: The Nintendo Switch 3D Model Component\n  function Switch(props) {\n    const group = useRef();\n    const { nodes, materials } = useGLTF(\"nintendo_switch/switch.gltf\");\n\n    useFrame(() => {\n      group.current.rotation.x += 0.00009;\n      group.current.rotation.y += 0.00009;\n      group.current.rotation.z += 0.00009;\n    });\n\n    // On load, filter all references of the meshes of the 3d Object,\n    // and save it to the meshes_array hook in app.js\n    // Allows app.js to directly manipulate the color of the meshes.\n    useEffect(() => {\n      var ObjtoArray = Object.values(materials);\n      const meshes_array = ObjtoArray.filter(\n        (obj) => obj.type === \"MeshStandardMaterial\"\n      );\n\n      handleSetMesh(meshes_array);\n    }, []);\n\n    return (\n      <group ref={group} {...props}>\n        <mesh\n          geometry={nodes.mesh_0.geometry}\n          material={materials.Top_Radiator_Mesh}\n        />\n        <mesh\n          geometry={nodes.mesh_1.geometry}\n          material={materials.Volume_Rocker}\n        />\n        <mesh\n          geometry={nodes.mesh_2.geometry}\n          material={materials.Screen_Bezel}\n        />\n        <mesh\n          geometry={nodes.mesh_3.geometry}\n          material={materials.Bumper_and_Buttons}\n        />\n        <mesh\n          geometry={nodes.mesh_4.geometry}\n          material={materials.Right_Joycon}\n        />\n        <mesh\n          geometry={nodes.mesh_5.geometry}\n          material={materials.Left_Joycon}\n        />\n      </group>\n    );\n  }\n\n  // Params: []\n  // Purpose: Helper function to assign array of meshes to it's state hook.\n  //          Mesh array used to select each mesh that's part of the model, and allow the user to color them.\n  const handleSetMesh = (meshes_array) => {\n    const _ = require(\"lodash\");\n\n    // If passed in meshes_array is not the same as the current mesh, replace it.\n    // This prevents \"Maximum update depth exceeded\" bug!\n    // meshes_array was provided by array.filter() which returns a reference to a different array albeit with the same contents\n    // To fix this, we did a deep comparison with lodash's built in isEqual function to check by value not reference.\n    if (_.isEqual(meshes_array, meshArray)) {\n      //Do nothing\n    } else {\n      setMeshArray(meshes_array);\n    }\n  };\n\n  return (\n    <div class=\"scene\">\n      <div class=\"donut-scene\">\n        <Canvas colorManagement camera={{ position: [4, -40, 6] }}>\n          <ambientLight intensity={0.2} />\n          <pointLight position={[20, 20, 20]} intensity={0.5} />\n          <spotLight intensity={0.3} position={[5, 20, 20]} />\n\n          {/*Throw in some Imported Drei Stars*/}\n          <Stars />\n\n          {/* Load with Suspense, such that if it takes a while to load, there's something to fall back onto*/}\n          <Suspense fallback={<Loader />}>\n            <Switch position={[0, 0, 0]} scale={0.25} />\n            <Earth position={[250, 14, -40]} />\n            <Moon position={[400, 50, -40]} />\n\n            {/* Just a preset for brighter lighting on 3d Object*/}\n            <Environment preset=\"sunset\" />\n          </Suspense>\n          <OrbitControls />\n        </Canvas>\n      </div>\n\n      {/* Displays a Accordion component for every mesh in the 3D GLTF Object\n          Accordion allows user to select color for mesh. */}\n      <div class=\"menu-overlay\">\n        <div class=\"menu-content\">\n          {meshArray.map((mesh) => (\n            <Accordion_Dropdown mesh_name={mesh.name} meshArray={meshArray} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}